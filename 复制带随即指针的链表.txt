给你一个长度为 n 的链表，每个节点包含一个额外增加的随机指针 random ，该指针可以指向链表中的任何节点或空节点。

构造这个链表的 深拷贝。 深拷贝应该正好由 n 个 全新 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 next 指针和 random 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。复制链表中的指针都不应指向原链表中的节点 。

例如，如果原链表中有 X 和 Y 两个节点，其中 X.random --> Y 。那么在复制链表中对应的两个节点 x 和 y ，同样有 x.random --> y 。

返回复制链表的头节点。

用一个由 n 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 [val, random_index] 表示：

val：一个表示 Node.val 的整数。
random_index：随机指针指向的节点索引（范围从 0 到 n-1）；如果不指向任何节点，则为  null 。
你的代码 只 接受原链表的头节点 head 作为传入参数。

 
 


/**
 * Definition for a Node.
 * struct Node {
 *     int val;
 *     struct Node *next;
 *     struct Node *random;
 * };
 */

struct Node* copyRandomList(struct Node* head) {
	
    struct Node* cur = head;

    //1.先在原链表的每一个节点之后插入一个值相同的节点，random先不赋值
    while(cur){
        struct Node* copy = (struct Node*)malloc(sizeof(struct Node));
        copy->val = cur->val;

        copy->next = cur->next;
        cur->next = copy;

        cur = copy->next;
    }


    //2.当都插入完毕之后，首先先判断原链表节点中的random指向的随机节点是不是NULL
    //如果是NULL,那么直接把copy节点的random赋值为NULL
   //如果不是，那么就把copy节点的random的next指向的节点（也就是这个节点的copy节点）赋值给copy的   random
    cur = head;
    while(cur){
         
         struct Node* copy =  cur->next;
         
         if(cur->random == NULL){
             copy->random = NULL;
         }else{
             copy->random = cur->random->next;
             cur = copy->next;
         }
        cur = copy->next;
    }


   //3.将原链表和插入的链表分开，并且同时将copy的节点尾插到copyHead和copyTail中去
    cur = head;
    struct Node* copyHead = NULL,*copyTail = NULL;
    while(cur){
        struct Node* copy = cur->next;
        struct Node* next = copy->next;

        cur->next = next;

        if(copyTail == NULL){
            copyHead = copyTail = copy;
        }else{
            copyTail->next = copy;
            copyTail = copy;
        }
        cur = next;
    }


    return copyHead;//最后返回copyHead就可以了


}